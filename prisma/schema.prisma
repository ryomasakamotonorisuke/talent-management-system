// Prismaスキーマファイル - 海外技能実習生タレントマネジメントシステム
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ユーザー（管理部署・勤務部署）
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  name        String
  role        UserRole
  department  String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // リレーション
  evaluations    Evaluation[]
  developmentPlans DevelopmentPlan[]
  interviews      Interview[]

  @@map("users")
}

// 実習生
model Trainee {
  id              String   @id @default(cuid())
  traineeId       String   @unique // 実習生ID（社内管理用）
  firstName       String
  lastName        String
  firstNameKana   String?
  lastNameKana    String?
  nationality     String
  passportNumber  String
  visaType        String
  visaExpiryDate  DateTime
  entryDate       DateTime
  departureDate   DateTime?
  department      String
  position        String?
  photo           String?  // 写真ファイルパス
  phoneNumber     String?
  email           String?
  address         String?
  emergencyContact String?
  emergencyPhone  String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // リレーション
  healthRecords     HealthRecord[]
  certificates      Certificate[]
  evaluations       Evaluation[]
  developmentPlans  DevelopmentPlan[]
  interviews        Interview[]
  ojtRecords        OJTRecord[]

  @@map("trainees")
}

// 健康管理記録
model HealthRecord {
  id          String   @id @default(cuid())
  traineeId   String
  recordDate  DateTime
  recordType  HealthRecordType
  description String?
  filePath    String?  // 健康診断書などのファイルパス
  doctorName  String?
  clinicName  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // リレーション
  trainee Trainee @relation(fields: [traineeId], references: [id], onDelete: Cascade)

  @@map("health_records")
}

// 資格・証明書
model Certificate {
  id            String   @id @default(cuid())
  traineeId     String
  name          String
  issuingBody   String?
  issueDate     DateTime?
  expiryDate    DateTime?
  filePath      String   // 暗号化されたファイルパス
  encryptedData String?  // 暗号化された証明書データ
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // リレーション
  trainee Trainee @relation(fields: [traineeId], references: [id], onDelete: Cascade)

  @@map("certificates")
}

// スキルマスター
model SkillMaster {
  id          String   @id @default(cuid())
  name        String
  category    String
  description String?
  levels      Json     // スキルレベルの定義（1-5段階）
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // リレーション
  evaluations Evaluation[]

  @@map("skill_masters")
}

// スキル評価
model Evaluation {
  id          String   @id @default(cuid())
  traineeId   String
  evaluatorId String
  skillId     String
  level       Int      // 1-5段階評価
  comment     String?
  evaluationDate DateTime @default(now())
  period      String   // 評価期間（例：2024-Q1）
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // リレーション
  trainee   Trainee     @relation(fields: [traineeId], references: [id], onDelete: Cascade)
  evaluator User        @relation(fields: [evaluatorId], references: [id])
  skill     SkillMaster @relation(fields: [skillId], references: [id])

  @@unique([traineeId, skillId, period, evaluatorId])
  @@map("evaluations")
}

// OJT記録
model OJTRecord {
  id          String   @id @default(cuid())
  traineeId   String
  trainerId   String?  // 指導者ID
  date        DateTime
  content     String
  duration    Int?     // 時間数
  progress    String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // リレーション
  trainee Trainee @relation(fields: [traineeId], references: [id], onDelete: Cascade)

  @@map("ojt_records")
}

// 育成計画
model DevelopmentPlan {
  id          String   @id @default(cuid())
  traineeId   String
  creatorId   String
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  goals       Json     // 目標のJSON配列
  status      PlanStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // リレーション
  trainee Trainee @relation(fields: [traineeId], references: [id], onDelete: Cascade)
  creator User    @relation(fields: [creatorId], references: [id])

  @@map("development_plans")
}

// 面談記録
model Interview {
  id          String   @id @default(cuid())
  traineeId   String
  interviewerId String
  interviewDate DateTime
  type        InterviewType
  content     String
  concerns    String?
  healthStatus String?
  progress    String?
  nextSteps   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // リレーション
  trainee     Trainee @relation(fields: [traineeId], references: [id], onDelete: Cascade)
  interviewer User    @relation(fields: [interviewerId], references: [id])

  @@map("interviews")
}

// 通知
model Notification {
  id        String   @id @default(cuid())
  userId    String?
  traineeId String?
  type      NotificationType
  title     String
  message   String
  isRead    Boolean  @default(false)
  priority  Priority @default(MEDIUM)
  createdAt DateTime @default(now())

  @@map("notifications")
}

// システム設定
model SystemSetting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  description String?
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

// 列挙型
enum UserRole {
  ADMIN           // 管理部署（人事・総務）
  DEPARTMENT      // 勤務部署（現場）
  TRAINEE         // 実習生本人
}

enum HealthRecordType {
  HEALTH_CHECK    // 健康診断
  MEDICAL_CONSULTATION // 産業医面談
  VACCINATION     // 予防接種
  OTHER          // その他
}

enum PlanStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum InterviewType {
  REGULAR         // 定期面談
  PROGRESS        // 進捗面談
  CONCERN         // 悩み相談
  HEALTH          // 健康面談
  EXIT            // 退職面談
}

enum NotificationType {
  VISA_EXPIRY     // 在留期限
  CERTIFICATE_EXPIRY // 資格期限
  HEALTH_CHECK_DUE // 健康診断期限
  EVALUATION_DUE  // 評価期限
  INTERVIEW_DUE   // 面談期限
  SYSTEM          // システム通知
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
